package com.example.screenreadertest

import android.accessibilityservice.AccessibilityService
import android.app.ActivityManager
import android.content.Context
import android.content.Intent
import android.graphics.Color
import android.graphics.PixelFormat
import android.graphics.Rect
import android.graphics.Typeface
import android.graphics.drawable.GradientDrawable
import android.os.Handler
import android.os.Looper
import android.text.Spannable
import android.text.SpannableString
import android.text.style.StyleSpan
import android.view.accessibility.AccessibilityEvent
import android.util.Log
import android.view.Gravity
import android.view.MotionEvent
import android.view.View
import android.view.WindowInsets
import android.view.WindowManager
import android.view.accessibility.AccessibilityNodeInfo
import android.widget.Button
import android.widget.LinearLayout
import android.widget.TextView
import java.util.Calendar

class MyAccessibilityService : AccessibilityService() {
    private var lastDetectedAmount: Int = 0
    private val handler = Handler(Looper.getMainLooper())
    private var lastCheckTime = 0L
    private var overlayView: View? = null
    private var centerPopupView: View? = null
    private var backgroundOverlayView: View? = null
    private var isConfirmed = false         // overlay ÏÉùÏÑ± Î≥ÄÏàò
    private var targetButtonNode: AccessibilityNodeInfo? = null
    private var ignoreUntil: Long = 0L  // Ïø®Îã§Ïö¥ Ï¢ÖÎ£å ÏãúÍ∞Å
    private var isDeliver = false;

    private lateinit var windowManager: WindowManager // WindowManager ÎØ∏Î¶¨ ÏÑ†Ïñ∏

    override fun onServiceConnected() {
        super.onServiceConnected()
        windowManager = getSystemService(Context.WINDOW_SERVICE) as WindowManager
    }

    override fun onAccessibilityEvent(event: AccessibilityEvent?) {
        event ?: return

        val packageName = event.packageName?.toString() ?: return

        val targetApps = setOf(
            "com.example.screenreadertest",
            "com.coupang.mobile.eats",
            "com.sampleapp",
            "com.fineapp.yogiyo"
        )

//        if (packageName !in targetApps) return

        // Ï£ºÎ¨∏ ÏôÑÎ£å Í∞êÏßÄ
        if (isDeliver && event.eventType == AccessibilityEvent.TYPE_WINDOW_CONTENT_CHANGED) {
            rootInActiveWindow?.let { node ->
                if (checkOrderConfirmedByTime(node)) {
                    val manager = LocalStatsManager(applicationContext)
                    manager.increment("orderCount", 1)
                    manager.increment("orderAmount", lastDetectedAmount)
                    Log.d("AccessibilityService", "‚úÖ ÏµúÏ¢Ö Ï£ºÎ¨∏ Í∏∞Î°ù ÏôÑÎ£å")

                    isDeliver = false  // Ï§ëÎ≥µ Î∞©ÏßÄÏö© Î¶¨ÏÖã
                }
            }
        }
        
        // Í≤∞Ï†úÌïòÍ∏∞ Î≤ÑÌäº ÌÉêÏßÄ
        when (event.eventType) {
            AccessibilityEvent.TYPE_WINDOW_STATE_CHANGED,
            AccessibilityEvent.TYPE_WINDOWS_CHANGED -> {
                Log.d(
                    "AccessibilityService",
                    "Event type: ${event.eventType}, Package: $packageName"
                )
                if (packageName !in targetApps && !isAppInForeground(this))
                    removeOverlay()

                if (packageName in targetApps && packageName != "com.example.screenreadertest")
                    isConfirmed = false
            }

            AccessibilityEvent.TYPE_WINDOW_CONTENT_CHANGED,
            AccessibilityEvent.TYPE_VIEW_CLICKED,
            AccessibilityEvent.TYPE_VIEW_FOCUSED,
            AccessibilityEvent.TYPE_VIEW_TEXT_CHANGED,
            AccessibilityEvent.TYPE_VIEW_SCROLLED -> {
                if (packageName in targetApps) {
                    rootInActiveWindow?.let { node ->
                        handler.postDelayed({
                            Log.d("AccessibilityService", "checkbuttons")
                            checkButtons(node)
                        }, 100)
                    }
                }
            }
        }
    }

    override fun onInterrupt() {
        Log.d("AccessibilityService", "ÏÑúÎπÑÏä§ Ï§ëÎã®Îê®")
    }

    private fun isAppInForeground(context: Context): Boolean {
        val activityManager = context.getSystemService(Context.ACTIVITY_SERVICE) as ActivityManager
        val runningAppProcesses = activityManager.runningAppProcesses
        runningAppProcesses?.let { processes ->
            for (process in processes) {
                if (process.importance == ActivityManager.RunningAppProcessInfo.IMPORTANCE_FOREGROUND) {
                    return process.processName == "com.example.screenreadertest"
                }
            }
        }
        return false
    }

    private fun checkButtons(node: AccessibilityNodeInfo) {
        val currentTime = System.currentTimeMillis()

        if (currentTime < ignoreUntil) {
            Log.d("AccessibilityService", "Ïø®Îã§Ïö¥ Ï§ëÏúºÎ°ú Î≤ÑÌäº ÌÉêÏßÄ Î¨¥Ïãú")
            return
        }
        if (isConfirmed) {
            Log.d("AccessibilityService", "Ïø®Îã§Ïö¥ Ï¢ÖÎ£å ‚Üí isConfirmed = false")
            isConfirmed = false
        }

        if (currentTime - lastCheckTime < 200) return
        lastCheckTime = currentTime

        val stack = mutableListOf(node)
        var foundButton = false

        while (stack.isNotEmpty()) {
            val currentNode = stack.removeAt(stack.lastIndex)
            val className = currentNode.className?.toString()
            val nodeText = currentNode.text?.toString()
            val isButton = className?.contains("Button") == true
            val isTextView = className?.contains("TextView") == true

            if ((isButton || isTextView) && (nodeText?.contains("Í≤∞Ï†úÌïòÍ∏∞") == true || nodeText?.contains("Pay") == true)) {
                if (!currentNode.isVisibleToUser) continue

                val rect = Rect().apply { currentNode.getBoundsInScreen(this) }
                if (rect.top == rect.bottom) currentNode.parent?.getBoundsInScreen(rect)

                if (rect.top != rect.bottom) {
                    if (isConfirmed) {
                        currentNode.performAction(AccessibilityNodeInfo.ACTION_CLICK)
                    } else {
                        targetButtonNode = currentNode // ÌÅ¥Î¶≠ÏùÑ ÏúÑÌï¥ Ï†ÄÏû•
                        blockButtonWithOverlay(rect)
                    }
                    val amount = extractAmountFromText(nodeText)
                    if (amount > 0) {
                        Log.d("AccessibilityService", "üéØ Î≤ÑÌäº ÌÖçÏä§Ìä∏ÏóêÏÑú Í∏àÏï° Ï∂îÏ∂ú: ${amount}Ïõê")
                        lastDetectedAmount = amount
                    }

                    blockButtonWithOverlay(rect)
                    foundButton = true
                    break // Ï≤´ Î≤àÏß∏ Î≤ÑÌäºÎßå Ï∞®Îã®
                }
            }
            for (i in 0 until currentNode.childCount) {
                currentNode.getChild(i)?.let { stack.add(it) }
            }
        }

        if (!foundButton) removeOverlay()
    }

    private fun blockButtonWithOverlay(rect: Rect) {
        removeOverlay()

        if (isConfirmed) return

        overlayView = View(this).apply {
            setBackgroundColor(Color.argb(150, 255, 0, 0))
            isClickable = true
            isFocusable = true
            setOnTouchListener { v, event ->
                if (event.action == MotionEvent.ACTION_DOWN) {
                    Log.d("AccessibilityService", "ÌÅ¥Î¶≠ Ï∞®Îã®Îê®")
                    Log.d("AccessibilityService", "Checked!")
                    v.performClick()
//                    showPendingPopup()
                    showCenterPopup()
                }
                true
            }
        }

        Log.d("AccessibilityService", "blockButtonWithOverlay" )
        val (screenWidth, screenHeight) = getScreenSize()
        Log.d("AccessibilityService", "blockButtonWithOverlay, h: $screenHeight")
        Log.d("AccessibilityService", "Rect, $rect")


        val layoutParams = WindowManager.LayoutParams(
            rect.width(),
            rect.height(),
            WindowManager.LayoutParams.TYPE_ACCESSIBILITY_OVERLAY,
            WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE,
            PixelFormat.TRANSLUCENT
        ).apply {
//            this.x = (screenWidth-rect.width())/2
//            this.y = (screenHeight-rect.height())
//            this.x = (screenWidth-rect.width())/2
//            this.y = (screenHeight-rect.height())
            val navSize = windowManager.currentWindowMetrics
                .windowInsets.getInsets(WindowInsets.Type.systemBars())
            this.x = rect.left
            this.y = rect.top
            Log.d("AccessibilityService", "y-start $navSize")
//            this.y = rect.top - windowManager.currentWindowMetrics
//                .windowInsets.getInsetsIgnoringVisibility(WindowInsets.Type.statusBars()).top
            gravity = Gravity.TOP or Gravity.START
        }

        windowManager.addView(overlayView, layoutParams)
    }

    private fun removeOverlay() {
        overlayView?.let {
            windowManager.removeView(it)
            overlayView = null
        }
    }

    private fun getScreenSize(): Pair<Int, Int> {
        val windowMetrics = windowManager.currentWindowMetrics
        val insets1 = windowMetrics.windowInsets.getInsetsIgnoringVisibility(WindowInsets.Type.systemBars())
        val insets2 = windowMetrics.windowInsets.getInsets(WindowInsets.Type.systemBars())
        val width = windowMetrics.bounds.width() - insets2.left - insets2.right
        val height = windowMetrics.bounds.height() - insets2.top - insets2.bottom

        Log.d("AccessibilityService", "getInsetsIgn: ${insets1.bottom}, getInsets: ${insets2.bottom}")
        Log.d("AccessibilityService", "getInsetsIgn: $insets1, getInsets: $insets2")
        Log.d("AccessibilityService", "bounds: ${windowMetrics.bounds}")
        Log.d("AccessibilityService", "bounds: w:${windowMetrics.bounds.width()}, h:${windowMetrics.bounds.height()}")

        return width to height
    }

//    private fun getStatusBarHeight(context: Context): Int {
//        val resourceId = context.resources.getIdentifier("status_bar_height", "dimen", "android")
//        return if (resourceId > 0) context.resources.getDimensionPixelSize(resourceId) else 0
//    }

//    private fun getNavigationBarHeight(context: Context): Int {
//        val resourceId = context.resources.getIdentifier("navigation_bar_height", "dimen", "android")
//        return if (resourceId > 0) context.resources.getDimensionPixelSize(resourceId) else 0
//    }


    private fun showPendingPopup() {
        removeOverlay()

        overlayView = View(this).apply {
            setBackgroundColor(Color.argb(120, 0, 0, 0)) // Î∞òÌà¨Î™Ö Í≤ÄÏ†ï
            isClickable = true
            isFocusable = true

            setOnClickListener {
                showCenterPopup()  // <- Ïò§Î≤ÑÎ†àÏù¥ ÌÅ¥Î¶≠ Ïãú ÌåùÏóÖ ÎùÑÏö∞Í∏∞
            }
        }

        val overlayParams = WindowManager.LayoutParams(
            WindowManager.LayoutParams.MATCH_PARENT,
            WindowManager.LayoutParams.MATCH_PARENT,
            WindowManager.LayoutParams.TYPE_ACCESSIBILITY_OVERLAY,
            WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE or
                    WindowManager.LayoutParams.FLAG_LAYOUT_IN_SCREEN,
            PixelFormat.TRANSLUCENT
        )

        windowManager.addView(overlayView, overlayParams)
    }

    private fun showCenterPopup() {
        if (centerPopupView != null) return

        // üîπ Î∞∞Í≤Ω Ïò§Î≤ÑÎ†àÏù¥ (Î∞òÌà¨Î™Ö)
        backgroundOverlayView = View(this).apply {
            setBackgroundColor(Color.argb(120, 0, 0, 0))
        }

        val bgParams = WindowManager.LayoutParams(
            WindowManager.LayoutParams.MATCH_PARENT,
            WindowManager.LayoutParams.MATCH_PARENT,
            WindowManager.LayoutParams.TYPE_ACCESSIBILITY_OVERLAY,
            WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE or WindowManager.LayoutParams.FLAG_LAYOUT_IN_SCREEN,
            PixelFormat.TRANSLUCENT
        ).apply {
            gravity = Gravity.CENTER
        }
        windowManager.addView(backgroundOverlayView, bgParams)

        // üîπ Îç∞Ïù¥ÌÑ∞ Î∂àÎü¨Ïò§Í∏∞
        val manager = LocalStatsManager(applicationContext)
        val orderCount = manager.get("orderCount")
        val orderAmount = manager.get("orderAmount")
        val calendar = Calendar.getInstance()
        val month = (calendar.get(Calendar.MONTH) + 1).toString().padStart(2, '0')

        // üîπ Í∞ïÏ°∞ ÌÖçÏä§Ìä∏
        val summaryText = "${month}Ïõî ÎèôÏïà Î∞∞Îã¨ ${orderCount}Ìöå, ${"%,d".format(orderAmount)}Ïõê ÏÇ¨Ïö©\n"
        val summarySpannable = SpannableString(summaryText).apply {
            val boldTarget = "${orderCount}Ìöå"
            val start = indexOf(boldTarget)
            if (start >= 0) {
                setSpan(StyleSpan(Typeface.BOLD), start, start + boldTarget.length, Spannable.SPAN_EXCLUSIVE_EXCLUSIVE)
            }
        }

        // üîπ ÌÖçÏä§Ìä∏ Î∑∞Îì§
        val summaryTextView = TextView(this).apply {
            text = summarySpannable
            textSize = 14f
            setTextColor(Color.DKGRAY)
            gravity = Gravity.CENTER
        }

        val questionTextView = TextView(this).apply {
            text = "Ï†ïÎßê Ï£ºÎ¨∏ÌïòÏãúÍ≤†ÏäµÎãàÍπå?"
            textSize = 18f
            setTypeface(null, Typeface.BOLD)
            setTextColor(Color.BLACK)
            gravity = Gravity.CENTER
            setPadding(0, 0, 0, 20)
        }

        // üîπ Î≤ÑÌäº Í∞ÄÎ°ú Î∞∞Ïπò
        val buttonRow = LinearLayout(this).apply {
            orientation = LinearLayout.HORIZONTAL
            gravity = Gravity.CENTER
            setPadding(0, 20, 0, 0)
            layoutParams = LinearLayout.LayoutParams(
                LinearLayout.LayoutParams.MATCH_PARENT,
                LinearLayout.LayoutParams.WRAP_CONTENT
            )
        }

        val yesButton = Button(this).apply {
            text = "ÎÑ§"
            layoutParams = LinearLayout.LayoutParams(0, LinearLayout.LayoutParams.WRAP_CONTENT, 1f).apply {
                marginEnd = 10
            }
            setOnClickListener {
                val amount = lastDetectedAmount
                manager.increment("orderCount", 1)
                manager.increment("orderAmount", amount)

                isConfirmed = true
                isDeliver = true
                ignoreUntil = System.currentTimeMillis() + 10_000

                removeOverlay()
                removeCenterPopup()
                overlayView?.isEnabled = false
                targetButtonNode?.performAction(AccessibilityNodeInfo.ACTION_CLICK)
                targetButtonNode = null
            }
        }

        val noButton = Button(this).apply {
            text = "ÏïÑÎãàÏöî"
            layoutParams = LinearLayout.LayoutParams(0, LinearLayout.LayoutParams.WRAP_CONTENT, 1f).apply {
                marginStart = 10
            }
            setOnClickListener {
                val amount = lastDetectedAmount
                manager.increment("stopCount", 1)
                manager.increment("savedAmount", amount)

                val intent = Intent(Intent.ACTION_MAIN).apply {
                    addCategory(Intent.CATEGORY_HOME)
                    flags = Intent.FLAG_ACTIVITY_NEW_TASK
                }
                startActivity(intent)

                removeOverlay()
                removeCenterPopup()
            }
        }

        buttonRow.addView(yesButton)
        buttonRow.addView(noButton)

        // üîπ ÌåùÏóÖ Î∑∞ Íµ¨ÏÑ±
        val popup = LinearLayout(this).apply {
            orientation = LinearLayout.VERTICAL
            setBackgroundColor(Color.WHITE)
            setPadding(40, 40, 40, 40)
            gravity = Gravity.CENTER
            background = GradientDrawable().apply {
                cornerRadius = 30f
                setColor(Color.WHITE)
            }

            addView(summaryTextView)
            addView(questionTextView)
            addView(buttonRow)
        }

        val params = WindowManager.LayoutParams(
            WindowManager.LayoutParams.WRAP_CONTENT,
            WindowManager.LayoutParams.WRAP_CONTENT,
            WindowManager.LayoutParams.TYPE_ACCESSIBILITY_OVERLAY,
            WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE or WindowManager.LayoutParams.FLAG_LAYOUT_IN_SCREEN,
            PixelFormat.TRANSLUCENT
        ).apply {
            gravity = Gravity.CENTER
        }

        windowManager.addView(popup, params)
        centerPopupView = popup
    }

    private fun removeCenterPopup() {
        centerPopupView?.let {
            windowManager.removeView(it)
            centerPopupView = null
        }
        backgroundOverlayView?.let {
            windowManager.removeView(it)
            backgroundOverlayView = null
        }
    }

    /**
     * Ïã§Ï†ú Î∞∞Îã¨ Ï£ºÎ¨∏ ÌôïÏù∏ÏùÑ ÏúÑÌïòÏó¨ '(Ï†ïÏàò)Î∂Ñ' ÌÇ§ÏõåÎìú ÌôïÏù∏
     */
    private fun extractAmountFromText(text: String?): Int {
        if (text.isNullOrBlank()) return 0
        val regex = Regex("""([\d,]+)\s*Ïõê""")
        val match = regex.find(text)
        return match?.groupValues?.get(1)?.replace(",", "")?.toIntOrNull() ?: 0
    }

    private fun checkOrderConfirmedByTime(node: AccessibilityNodeInfo): Boolean {
        val stack = mutableListOf(node)
        val regex = Regex("""\d{1,3}\s*Î∂Ñ""")  // 1~3ÏûêÎ¶¨ Ïà´Ïûê + "Î∂Ñ"

        while (stack.isNotEmpty()) {
            val current = stack.removeAt(stack.lastIndex)
            val text = current.text?.toString() ?: continue

            if (regex.containsMatchIn(text)) {
                Log.d("AccessibilityService", "Ï£ºÎ¨∏ ÏôÑÎ£å Í∞êÏßÄÎê® (ÏòàÏÉÅÏãúÍ∞Ñ: $text)")
                return true
            }

            for (i in 0 until current.childCount) {
                current.getChild(i)?.let { stack.add(it) }
            }
        }

        return false
    }
}